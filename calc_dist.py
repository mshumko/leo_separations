# This script calculates the cross-spacecraft separation between AC6 and FU3
from datetime import datetime, timedelta
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.dates as md
import dateutil.parser
from matplotlib.dates import date2num
import sys
import csv

# My libraries
sys.path.append('/home/mike/research/mission-tools/ac6/')
import read_ac_data

Re=6371 # km

class CalcDist():
    def __init__(self, fb_id, ac_id, startDate, endDate, fbEphem, acEphem=False):
        """
        This class loads in two ephemeris files that were generated by 
        SGP4, or the daily AC6 coords files, and calculates the total
        distance, in-track, and cross-track separation between the two
        spacecraft.
        """
        self.ac_id = ac_id
        self.fb_id = fb_id
        self.startDate = startDate
        self.endDate = endDate

        # Load ephem data.
        self.fbEphem = self._load_mike_ephem(fbEphem)
        # Load AC6 data
        if acEphem == False:
            self.acEphem = self._load_ac_ephem()
        else:
            self.acEphem = self._load_mike_ephem(acEphem)
        self._find_common_times() # Filter data by the same time stamps.
        return
        
    def calc_dist(self):
        """
        This is a wrapper function that calculates the total separation using
        greatCircleDist(). This function calculates the psudo in-track lag
        from the difference in latitude. Positive in-track separation implies 
        that you add the lag (or separation) to spacecraft B. 
        """
        # Format inputs for haversine method.
        X1 = np.array([self.acEphem['lat'], self.acEphem['lon'], self.acEphem['alt']]).T
        X2 = np.array([self.fbEphem['lat'], self.fbEphem['lon'], self.fbEphem['alt']]).T
        
        direction = np.convolve([-0.5, 0.5], self.acEphem['lat'], mode='same')
        
        self.dTot = self._haversine(X1, X2) # Get total distance
        A = Re+(X1[:, 2]+X2[:, 2])/2 # Mean altitude
        # Find a rough fraction of total distance that is in-track.
        
        self.dInTrack = np.pi/180*A*(X1[:, 0] - X2[:, 0])*np.sign(sirection)
        # Use Pathagorean theorem to calculate the cross-track separation.
        self.dCrossTrack = np.sqrt(self.dTot**2 - self.dInTrack**2)
        return self.dTot, self.dInTrack, self.dCrossTrack

    def save_file(self, saveName):
        """
        This method saves the separation data into a csv file.
        """
        #def save_dist(times, dInTrack, dCrossTrack, L_AC, L_FB, MLT_AC, MLT_FB, fPath):

        with open(saveName, 'w', newline='') as f:
            w = csv.writer(f)
            # Write header
            w.writerow(['dateTime', 'dist_in_track [km]', 'dist_cross_track [km]', 'L_AC6{}'.format(self.ac_id), 
                        'L_FU{}'.format(self.fb_id), 'MLT_AC6{}'.format(self.ac_id), 
                        'MLT_FU{}'.format(self.fb_id)])
            # Save data.
            zz = zip(self.acEphem['dateTime'], self.dInTrack, self.dCrossTrack, 
                    self.acEphem['L'], self.fbEphem['L'], self.acEphem['MLT'], 
                    self.fbEphem['MLT'])
            for z in zz:
                w.writerow([*z])
            return

    def plot_dist(self):
        """

        """
        fig, ax = plt.subplots(2, figsize=(10, 8), sharex=True)
        ax_t = ax[0].twinx()

        ax[0].plot(fb['dateTime'][fbInd], d)
        ax_t.plot(fb['dateTime'][fbInd], d/7.5) # Assuming a 7.5 km/s orbital velocity
        ax_t.set_ylabel('In-track lag [s] (assuming no cross-track)')
        ax[0].set_title('{}-{} | FU{}-AC6{} total separation'.format(
            DATE_RANGE[0].date(), DATE_RANGE[1].date(), FB_ID, AC_ID))
        ax[0].set_xlabel('UTC')
        ax[0].set_ylabel('Separation [km]')

        ax[1].plot(fb['dateTime'][fbInd], np.abs(ac['Lm_T89'][acInd]-fb['Lm_T89'][fbInd]))
        ax[1].set(ylabel='dL', ylim=(0, 3))
        return

    def _load_mike_ephem(self, fPath):
        """
        This method loads in the ephemeris (magnetic ephemeris) that was 
        generated by Mike's SGP4 algorithm implementation. 
        """
        ephem = {}
        keys = ['dateTime', 'lat', 'lon', 'alt', 'L', 'MLT']

        with open(fPath) as f:
            r = csv.reader(f, quotechar='"')
            next(r)
            #keys = next(r)
            # Strip leading whitespce in keys
            #keys = [s.lstrip() for s in keys]        
            rawData = list(r)
        for (i, key) in enumerate(keys):
            ephem[key] = np.array(rawData)[:, i]
            if key != 'dateTime':
                ephem[key] = ephem[key].astype(float)
            else:
                ephem['dateTime'] = np.array([dateutil.parser.parse(t) 
                                    for t in ephem['dateTime']])
        return ephem
        
    def _load_ac_ephem(self):
        """
        This function will load in the coords data type from the AC6 directory
        and append them all to each other.
        """
        ephem={}
        ephem['dateTime'] = np.array([])
        ephem['lat'] = np.array([])
        ephem['lon'] = np.array([])
        ephem['alt'] = np.array([])
        ephem['L'] = np.array([])
        ephem['MLT'] = np.array([])

        days = [self.startDate + timedelta(t) for t in 
                range((self.endDate - self.startDate).days+1)]
        for d in days:
            # Load AC-6 coordinates
            try:
                rawAc = read_ac_data.read_ac_data_wrapper('A', d, dType='coords') 
            except AssertionError as err:
                if 'None or > 1 AC6 files found' in str(err): 
                    continue
                else:
                    raise
            ephem['dateTime'] = np.append(ephem['dateTime'], rawAc['dateTime'])
            ephem['lat'] = np.append(ephem['lat'], rawAc['lat'])
            ephem['lon'] = np.append(ephem['lon'], rawAc['lon'])
            ephem['alt'] = np.append(ephem['alt'], rawAc['alt'])
            ephem['L'] = np.append(ephem['L'], rawAc['Lm_OPQ'])
            ephem['MLT'] = np.append(ephem['MLT'], rawAc['MLT_OPQ'])
        return ephem

    def _find_common_times(self):
        """
        This method filters the two ephemeris files to the same time
        stamps.
        """
        # Find common times
        fbT = date2num(self.fbEphem['dateTime'])
        acT = date2num(self.acEphem['dateTime'])
        fbInd = np.where(np.in1d(fbT, acT))[0]
        acInd = np.where(np.in1d(acT, fbT))[0]

        # Filter data
        for key in self.fbEphem:
            self.fbEphem[key] = self.fbEphem[key][fbInd]
        for key in self.acEphem:
            self.acEphem[key] = self.acEphem[key][acInd]
        return

        
    def _haversine(self, X1, X2):
        """
        Implementation of the haversine foruma to calculate total distance
        at an average altitude. X1 and X2 must be N*3 array of 
        lat, lon, alt.
        """
        X1 = np.asarray(X1)
        X2 = np.asarray(X2)
        R = (Re+(X1[:, 2]+X2[:, 2])/2)
        s = 2*np.arcsin( np.sqrt( np.sin(np.deg2rad(X1[:, 0]-X2[:, 0])/2)**2 + \
                        np.cos(np.deg2rad(X1[:, 0]))*np.cos(np.deg2rad(X2[:, 0]))*\
                        np.sin(np.deg2rad(X1[:, 1]-X2[:, 1])/2)**2 ))
        return R*s
if __name__ == '__main__':
    FB_ID = '3'
    AC_ID = 'A'
    DATE_RANGE = [datetime(2018, 4, 11), datetime(2018, 6, 11)]
    fbPath = ('./data/ephem/FU{}_{}_{}_LLA_magephem_pre.csv'.format(
            FB_ID, DATE_RANGE[0].date(), (DATE_RANGE[1]).date()))
    acPath = ('./data/ephem/AEROCUBE_6{}_{}_{}_LLA_magephem_pre.csv'.format(
                AC_ID, DATE_RANGE[0].date(), (DATE_RANGE[1]).date()))
    saveDir = ('./data/dist/{}_{}_FU{}_AC6{}_dist_v2.csv'.format(
                DATE_RANGE[0].date(), DATE_RANGE[1].date(), FB_ID, AC_ID))
    c = CalcDist(FB_ID, AC_ID, *DATE_RANGE, fbPath, acPath)
    c.calc_dist()
    c.save_file(saveDir)
